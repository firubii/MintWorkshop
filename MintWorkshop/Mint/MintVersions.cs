using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MintWorkshop.Util;

namespace MintWorkshop.Mint
{
    public static class MintVersions
    {
        public static Dictionary<byte[], Opcode[]> Versions = new Dictionary<byte[], Opcode[]>(new ByteArrayComparer())
        {
            {
                //Kirby's Return to Dream Land
                //Kirby's Dream Collection

                //Despite having 0.2.0.0 here, it needs its own code for reading scripts + archive
                //HAL redid the archive and script format after Kirby's Dream Collection, which is the only format supported at the moment
                new byte[] { 0,2,0,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsrrz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldfrsr", new InstructionArg[] {InstructionArg.Z, InstructionArg.RegX}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {}, Action.Return),
                    new Opcode("fret",   new InstructionArg[] {InstructionArg.RegX}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("arirx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arlen",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                }
            },
            {
                //Kirby Triple Deluxe
                new byte[] { 1,0,5,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsrfz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldfrsr", new InstructionArg[] {InstructionArg.Z,InstructionArg.RegX}),
                    new Opcode("ldfs2",  new InstructionArg[] {InstructionArg.Z,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldfs3f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldfrfr", new InstructionArg[] {InstructionArg.Z,InstructionArg.X}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {}, Action.Return),
                    new Opcode("fret",   new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("callnt", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnewd", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby Fighters Deluxe
                //Dedede's Drum Dash Deluxe
                new byte[] { 1,0,8,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsrfz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldfrsr", new InstructionArg[] {InstructionArg.Z,InstructionArg.RegX}),
                    new Opcode("ldfs2",  new InstructionArg[] {InstructionArg.Z,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldfs3f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldfrfr", new InstructionArg[] {InstructionArg.Z,InstructionArg.X}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {}, Action.Return),
                    new Opcode("fret",   new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("callnt", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //BoxBoy!
                new byte[] { 1,0,13,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby and the Rainbow Curse
                new byte[] { 1,0,17,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //BoxBoxBoy!
                //Kirby Planet Robobot
                new byte[] { 1,1,3,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby's Blowout Blast
                new byte[] { 1,1,8,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofap", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obname", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Bye-Bye BoxBoy!
                //Team Kirby Clash Deluxe
                new byte[] { 1,1,12,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofap", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obname", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby Battle Royale
                //Part-Time UFO (Mobile)
                new byte[] { 2,1,4,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldmrp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofap", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mcopys", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obname", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby Star Allies
                //Super Kirby Clash
                new byte[] { 2,1,5,1 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldmrp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofap", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mcopys", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obname", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby Fighters 2
                new byte[] { 2,4,0,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrbt", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("ldsrca", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrV}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ldsrsa", new InstructionArg[] {}),
                    new Opcode("ldsrsv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofa4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldofap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ldsrsz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldsrfa", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldtype", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldmrp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stsra4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofa4", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsrap", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("stofap", new InstructionArg[] {InstructionArg.RegX,InstructionArg.RegZ,InstructionArg.XRefY}),
                    new Opcode("stsvsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("inci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("deci32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("incf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("decf32", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ltcmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("lecmp",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("eqbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nebool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("neptr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("eqstr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("nestr",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("eqwstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("newstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.ArrRegX,InstructionArg.ArrRegY}),
                    new Opcode("astidx", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ntbool", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntRegX,InstructionArg.IntRegY}),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("call",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("vcal",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("ecall",  new InstructionArg[] {InstructionArg.Z,InstructionArg.X,InstructionArg.Y}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("mcopy",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mcopys", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("mzeros", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("sppop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("addofs", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ldaddr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.XRefY}),
                    new Opcode("arpshz", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("aridx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arpop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("arcopy", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapshz", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("waidx",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("wapop",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctis",   new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("ctobja", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obflag", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.IntV}),
                    new Opcode("obdel",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV}),
                    new Opcode("obname", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("unk_6b", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("enmstr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.XRefV})
                }
            },
            {
                //Kirby and the Forgotten Land
                new byte[] { 7,0,2,0 },
                new Opcode[] {
                    new Opcode("nop",    new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldsrsr", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ldsr2",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ldsr3",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY,InstructionArg.RegA }, Action.None, true),
                    new Opcode("ldsr4",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY,InstructionArg.RegA,InstructionArg.RegB}, Action.None, true),
                    new Opcode("ldsr5",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY,InstructionArg.RegA,InstructionArg.RegB,InstructionArg.RegC}, Action.None, true),
                    new Opcode("unk_06", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("mcopys", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.RegX, InstructionArg.XRefE}, Action.None, true),
                    new Opcode("unk_08", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefV}),
                    new Opcode("obnew",  new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefV}),
                    new Opcode("ldsrzr", new InstructionArg[] {InstructionArg.RegZ}),
                    new Opcode("ldsrc4", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.IntV}),
                    new Opcode("ldsrcf", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.FloatV}),
                    new Opcode("calltv", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefV}),
                    new Opcode("calltr", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefV}),
                    new Opcode("unk_0f", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefV }),
                    new Opcode("fret",   new InstructionArg[] {InstructionArg.RegZ}, Action.Return),
                    new Opcode("fleave", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("unk_12", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("unk_13", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("jmppos", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("jmpneg", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.VSigned}, Action.Jump),
                    new Opcode("nei32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("nef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("nei64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("lts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("ltf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("les32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("lef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gts32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gtf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("ges32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gef32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("eqi32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("eqf32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("eqi64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("ltu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("ltf64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("leu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("lef64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gtu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gtf64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("geu32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    new Opcode("gef64",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}, Action.Skip),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    new Opcode("addi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("addf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("subf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("muls32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mulf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("divu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("mods32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("modu32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("andi32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("ori32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("xori32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("nti32",  new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("slli32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("slri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("srri32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX,InstructionArg.RegY}),
                    new Opcode("negs32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("negf32", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("cts32f", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctu32s", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("ctf32u", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    Opcode.None(),
                    new Opcode("sppsh",  new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefE}, Action.None, true),
                    new Opcode("sppshz", new InstructionArg[] {InstructionArg.RegZ, InstructionArg.XRefE}, Action.None, true),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    new Opcode("opldo4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("opldop", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    Opcode.None(),
                    new Opcode("opstop", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    new Opcode("opsto4", new InstructionArg[] {InstructionArg.RegZ,InstructionArg.RegX}),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    Opcode.None(),
                    new Opcode("fenter", new InstructionArg[] {InstructionArg.Y}),
                    Opcode.None(),
                    Opcode.None(),
                    new Opcode("opexec", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("unk_6b", new InstructionArg[] {InstructionArg.XRefV}),
                    Opcode.None(),
                    new Opcode("jmp",    new InstructionArg[] {InstructionArg.VSigned}, Action.Jump),
                    Opcode.None(),
                    new Opcode("fretnv", new InstructionArg[] {InstructionArg.RegY}, Action.Return),
                    new Opcode("unk_70", new InstructionArg[] {InstructionArg.RegY}),
                    new Opcode("callnv", new InstructionArg[] {InstructionArg.XRefV}),
                    new Opcode("yield",  new InstructionArg[] {InstructionArg.RegZ}),
                    Opcode.None()
                }
            }
        };
    }
}
